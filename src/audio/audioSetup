import { useRef } from "react";

class ConsoleAudio {
  constructor (Hz) {
    this.context = new AudioContext();
    this.osc = this.context.createOscillator();

    this.osc.connect(this.context.destination);

    this.osc.frequency.setValueAtTime(Hz, this.context.currentTime);
    this.osc.setPeriodicWave(this.context.createPeriodicWave([0,0], [0,0]))

    this.osc.start();
  }

  setWave(wave) {
    console.log(wave.imagFreq)
    // Create a PeriodicWave object with the spectrum.
    const period = this.context.createPeriodicWave(
      wave.realFreq.slice(1, wave.realFreq.length / 2), // Divide by 2 to get up to Nyquist freq.
      wave.imagFreq.slice(1, wave.imagFreq.length / 2)
    );
    this.osc.setPeriodicWave(period);
    this.context.resume();
    console.log("here")
  }
}

export function useAudio(Hz) {
  const audioRef = useRef();
  if (!audioRef.current) {
      audioRef.current = new ConsoleAudio(Hz);
  }
  return audioRef.current;
}



